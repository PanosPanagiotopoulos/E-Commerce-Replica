using E_Commerce_Application_API.Data;
using E_Commerce_Application_API.Models;

namespace E_Commerce_Application_API.SeedHelpers
{
    public class Seed
    {
        // Inject the DataContext into the Seed class constructor for dependency injection
        private readonly DataContext DataContext;
        public Seed(DataContext context)
        {
            this.DataContext = context;
        }

        // Main seeding function to fill up the database intially
        // Cna be used with either fake data or real data. Fake data will be generated by helper functions
        public void SeedDataContext()
        {

            // Check if data already exists
            if (DataContext.Users.Any())
            {
                return; // Data was already seeded
            }

            // Get the data from the functions
            var users = FakeDbDataGenerator.GetUsers();
            var paymentMethods = FakeDbDataGenerator.GetPaymentMethods();
            var products = FakeDbDataGenerator.GetProducts();

            // Add users to context and save changes to get User.Id
            DataContext.Users.AddRange(users);
            DataContext.SaveChanges();

            // Now create shopping carts with UserId
            foreach (var user in users)
            {
                var shoppingCart = new ShoppingCart
                {
                    UserId = user.Id,
                    CartProducts = new List<CartProducts>()
                };
                user.ShoppingCart = shoppingCart;
                DataContext.ShoppingCarts.Add(shoppingCart);
            }


            var methodProducts = FakeDbDataGenerator.GetMethodProducts(paymentMethods, products);
            var cartProducts = FakeDbDataGenerator.GetCartProducts(users, products);

            // Establish relationships
            // Link MethodProducts to PaymentMethods and Products
            foreach (var mp in methodProducts)
            {
                if (mp.PaymentMethod.MethodProducts == null)
                    mp.PaymentMethod.MethodProducts = new List<MethodProducts>();
                mp.PaymentMethod.MethodProducts.Add(mp);

                if (mp.Product.PaymentMethods == null)
                    mp.Product.PaymentMethods = new List<MethodProducts>();
                mp.Product.PaymentMethods.Add(mp);
            }

            // Link CartProducts to ShoppingCarts and Products
            foreach (var cp in cartProducts)
            {
                if (cp.ShoppingCart.CartProducts == null)
                    cp.ShoppingCart.CartProducts = new List<CartProducts>();
                cp.ShoppingCart.CartProducts.Add(cp);

                if (cp.Product.CartProducts == null)
                    cp.Product.CartProducts = new List<CartProducts>();
                cp.Product.CartProducts.Add(cp);
            }

            // Add data to context and save changes
            DataContext.PaymentMethods.AddRange(paymentMethods);
            DataContext.Products.AddRange(products);
            DataContext.MethodProducts.AddRange(methodProducts);
            DataContext.CartProducts.AddRange(cartProducts);

            // Save changes
            DataContext.SaveChanges();

        }
    }
}
